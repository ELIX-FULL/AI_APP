# handlers/image_handler.py

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from sqlalchemy.ext.asyncio import AsyncSession

from keyboards import main_menu_keyboard
from services.image_generator import Text2ImageAPI

router = Router()


class ImageGenStates(StatesGroup):
    waiting_for_prompt = State()


@router.callback_query(F.data == "generate_image")
async def start_image_generation(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ImageGenStates.waiting_for_prompt)
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–æ–º–ø—Ç) —Ç–æ–≥–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `—Ä—ã–∂–∏–π –∫–æ—Ç –≤ –æ—á–∫–∞—Ö —á–∏—Ç–∞–µ—Ç –∫–Ω–∏–≥—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, 4k`"
    )
    await callback.answer()


@router.message(ImageGenStates.waiting_for_prompt, F.text)
async def process_image_prompt(message: Message, state: FSMContext, bot: Bot, image_api: Text2ImageAPI,
                               session: AsyncSession):
    await state.clear()
    prompt = message.text
    waiting_msg = await message.reply("üé® –ü—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ù–∞—á–∏–Ω–∞—é —Ç–≤–æ—Ä–∏—Ç—å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã.")

    try:
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï 4: –í—ã–∑—ã–≤–∞–µ–º get_pipeline –≤–º–µ—Å—Ç–æ get_model
        pipeline_id = await image_api.get_pipeline()
        if not pipeline_id:
            await waiting_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –ü–µ—Ä–µ–¥–∞–µ–º pipeline_id –≤ generate
        uuid = await image_api.generate(prompt, pipeline_id)
        if not uuid:
            await waiting_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        image_bytes = await image_api.check_generation(uuid)

        if image_bytes:
            await waiting_msg.delete()
            await message.reply_photo(
                photo=BufferedInputFile(image_bytes, filename="generated_image.png"),
                caption=f"‚úÖ –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n\n`{prompt}`"
            )
        else:
            await waiting_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")

    except Exception as e:
        await waiting_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
@router.message(ImageGenStates.waiting_for_prompt)
async def incorrect_input_for_image(message: Message):
    await message.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
