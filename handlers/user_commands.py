# handlers/user_commands.py
from aiogram import Router, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.exceptions import TelegramBadRequest

from database import requests as rq
from handlers.chat_handlers import ChatStates
from keyboards import channels_keyboard, main_menu_keyboard, chat_actions_keyboard

router = Router()

async def check_user_subscription(bot: Bot, user_id: int, session: AsyncSession) -> bool:
    channels = await rq.get_active_channels(session)
    if not channels:
        return True
    for channel in channels:
        try:
            member = await bot.get_chat_member(chat_id=channel.channel_id, user_id=user_id)
            if member.status in ['left', 'kicked']:
                return False
        except TelegramBadRequest:
            return False
    return True


# --- –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä /start ---

@router.message(CommandStart())
async def handle_start(message: Message, session: AsyncSession, bot: Bot, state: FSMContext):
    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–∏–ª–∏ state –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    current_state = await state.get_state()

    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç–µ
    if current_state == ChatStates.in_chat:
        await message.reply(
            "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò. ü§ñ\n\n"
            "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —á–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
            reply_markup=chat_actions_keyboard()
        )
        return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ —á–∞—Ç–µ
    user = message.from_user
    name = f"<a href='tg://user?id={user.id}'>{user.first_name}</a>"
    await rq.add_user(session, user.id, user.username, user.full_name)

    is_subscribed = await check_user_subscription(bot, user.id, session)
    if is_subscribed:
        await message.answer(
            f"<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard(),
            parse_mode='HTML'
        )
    else:
        await message.answer(
            f"<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}!</b>\n\n<i>üëá –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:</i>",
            reply_markup=await channels_keyboard(session),
            parse_mode='HTML'
        )

@router.callback_query(lambda c: c.data == "check_subscription")
async def handle_check_subscription(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    user = callback.from_user
    name = f"<a href='tg://user?id={user.id}'>{user.first_name}</a>"
    is_subscribed = await check_user_subscription(bot, user.id, session)
    if is_subscribed:
        await callback.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!", show_alert=False)
        await callback.message.edit_text(
            f"<b>üëã –û—Ç–ª–∏—á–Ω–æ, {name}!</b>\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.",
            reply_markup=main_menu_keyboard(),
            parse_mode='HTML'
        )
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.", show_alert=True)

@router.callback_query(F.data == "my_profile")
async def my_profile_handler(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    current_state = await state.get_state()
    if current_state == ChatStates.in_chat:
        await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞.", show_alert=True)
        return

    user_db = await rq.get_user(session, callback.from_user.id)
    if user_db:
        profile_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"<b>üÜîID:</b> <code>{user_db.id}</code>\n"
            f"<b>üåü–°—Ç–∞—Ç—É—Å:</b> {user_db.user_status}\n"
            f"<b>üí∞–ë–∞–ª–∞–Ω—Å:</b> {user_db.balance} –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π)\n"
            f"<b>üìä–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user_db.created_at.strftime('%Y-%m-%d %H:%M')}"
        )
        await callback.message.edit_text(profile_text, reply_markup=main_menu_keyboard())
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ /start", show_alert=True)

    await callback.answer()
